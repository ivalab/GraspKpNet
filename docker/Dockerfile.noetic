FROM nvidia/cuda:11.8.0-devel-ubuntu20.04 AS cuda-builder

# We need cuda to build DCNv2

RUN apt-get update && \
    apt-get install -y \
        apt-utils \
        build-essential \
        python3-dev \
        python3-pip \
        python-is-python3

RUN pip install --upgrade pip wheel cython torch==1.13.1

# We first try building the DCNv2 module via the 
# #0 8.181 ModuleNotFoundError: No module named 'torch.utils.ffi'
# https://github.com/pytorch/pytorch/issues/15645
# WORKDIR /opt/DCNv2
# ADD src/lib/models/networks/DCNv2 ./
# RUN bash make.sh

RUN pip install DCNv2

# Second stage for the actual image
FROM nvidia/cuda:11.8.0-runtime-ubuntu20.04

# https://stackoverflow.com/questions/70997674/docker-image-multistage-build-how-to-create-a-docker-image-copying-only-python
COPY --from=cuda-builder /usr/local/lib/python3.8/dist-packages /usr/local/lib/python3.8/dist-packages

RUN apt-get update && \
    apt-get install -y \
        apt-utils \
        build-essential \
        git \
        python3-dev \
        python3-pip \
        python-is-python3

RUN pip install --upgrade pip wheel

# take the core ros image on top of the cuda focal image
# https://github.com/osrf/docker_images/blob/master/ros/noetic/ubuntu/focal/ros-core/Dockerfile

# noninteractive to avoid tzdata prompt
ENV DEBIAN_FRONTEND noninteractive
ENV ROS_DISTRO noetic
RUN echo "deb http://packages.ros.org/ros/ubuntu focal main" > /etc/apt/sources.list.d/ros1-latest.list
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        ros-noetic-ros-core=1.5.0-1*

# # install cocoapi
WORKDIR /opt
RUN git clone https://github.com/cocodataset/cocoapi.git && \
    cd cocoapi &&\
    git checkout 8c9bcc3
WORKDIR /opt/cocoapi/PythonAPI
RUN make && \
    python setup.py install

RUN pip install torch==1.13.1 torchvision

WORKDIR /app
ADD requirements.txt /app/requirements.txt
RUN pip install -r requirements.txt

RUN apt-get install -y libgl1-mesa-glx

# add the source code to the image
WORKDIR /app
ADD . /app

# setup entrypoint
COPY ./docker/bin/ros_entrypoint.sh /
ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["bash"]